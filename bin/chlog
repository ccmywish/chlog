#!/usr/bin/env ruby
# ------------------------------------------------------
# File          : chlog.rb
# Authors       : ccmywish <ccmywish@qq.com>
# Created on    : <2022-03-18>
# Last modified : <2022-03-19>
#
# chlog:
#
#   Maintain your project's changelog
#
# ------------------------------------------------------

CHLOG_VERSION = "1.1"

require 'date'
$today = Date.today.to_s

$unreleased_title = "## [Unreleased](#) (#$today)"

$chlog_template = <<EOT
# Changelog

#$unreleased_title

<br>

## [Initialize](#) (#$today)

<br>

<hr>

This Changelog is maintained with [chlog](https://github.com/ccmywish/chlog)

EOT

def get_changelog
  file = "CHANGELOG.md"
  if File.exists? file
    return File.read file
  else
    puts "chlog: Auto generate CHANGELOG.md"
    File.write(file, $chlog_template)
    return File.read file
  end
end

def help
  puts <<EOH
chlog (v#{CHLOG_VERSION}): Help maintain Changelog of your projects

usage:

  chlog          => Generate CHANGELOG.md
  chlog log      => Add log according to case or to Enhancements by default
  chlog -e log   => Add log to Enhancements
  chlog -b log   => Add log to Bug fixes
  chlog -d log   => Add log to Deprecations
  chlog -r v3.14 => Release version to v3.14

EOH

end

def match_unreleased?(str)
  str =~ /^## \[Unreleased\]\(.*\) \(\d{4}-\d\d-\d\d\)/
end

def match_enhancements?(str)
  str =~ /^\*\*Enhancements:\*\*/
end

def match_bugfix?(str)
  str =~ /^\*\*Bug fixes:\*\*/
end

def match_deprecations?(str)
  str =~ /^\*\*Deprecations:\*\*/
end


def add_to_enhancements(log)

  content = get_changelog
  lns = content.lines

  unless match_unreleased? lns[2]
    to_wr = $unreleased_title + "\n\n"
    to_wr += "**Enhancements:**\n\n" + '- ' + log + "\n\n<br>\n\n"

    File.write("CHANGELOG.md", "# Changelog\n\n" + to_wr + lns[2..].join)
  else
    if match_enhancements? lns[4]
      # Enhancements exist
      to_wr = lns[0..5].join + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[6..].join)
    else
      puts "chlog: Add 'Enhancements' category"
      to_wr = lns[0..3].join + "**Enhancements:**\n\n" + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[3..].join)
    end
  end

  puts "chlog: Add to Enhancements"
end



def add_to_bugfix(log)

  content = get_changelog
  lns = content.lines

  unless match_unreleased? lns[2]
    to_wr = $unreleased_title + "\n\n"
    to_wr += "**Bug fixes:**\n\n" + '- ' + log + "\n\n<br>\n\n"

    File.write("CHANGELOG.md", "# Changelog\n\n" + to_wr + lns[2..].join)
  else
    # next index
    ni = lns[3..].each_with_index {break _2 if _1.start_with?("## [") }
    ni += 3

    bug_i = lns[3..ni].each_with_index { break _2 if match_bugfix?(_1) }

    # The not match return value is not nil!! But an array!!
    if bug_i.class != Integer
      puts "chlog: Add 'Bug fixes' category"
      to_wr = lns[0..(ni-3)].join + "**Bug fix:**\n\n" + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[(ni-3)..].join)
    else
      bug_i += 3
      # Buf fix exists
      to_wr = lns[0..bug_i+1].join + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[bug_i+2..].join)
    end

  end

  puts "chlog: Add to Bug fixes"
end



def add_to_deprecations(log)

  content = get_changelog
  lns = content.lines

  unless match_unreleased? lns[2]
    to_wr = $unreleased_title + "\n\n"
    to_wr += "**Deprecations:**\n\n" + '- ' + log + "\n\n<br>\n\n"

    File.write("CHANGELOG.md", "# Changelog\n\n" + to_wr + lns[2..].join)
  else
    # next index
    ni = lns[3..].each_with_index {break _2 if _1.start_with?("## [") }
    ni += 3

    bug_i = lns[3..ni].each_with_index { break _2 if match_deprecations?(_1) }

    # The not match return value is not nil!! But an array!!
    if bug_i.class != Integer
      puts "chlog: Add 'Deprecations' category"
      to_wr = lns[0..(ni-3)].join + "**Deprecations:**\n\n" + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[(ni-3)..].join)
    else
      bug_i += 3
      # Buf fix exists
      to_wr = lns[0..bug_i+1].join + '- ' + log + "\n"
      File.write("CHANGELOG.md", to_wr + lns[bug_i+2..].join)
    end

  end

  puts "chlog: Add to Deprecations"
end



def release_new_version(ver)
  content = get_changelog
  lns = content.lines
  # puts lns[2]
  unless match_unreleased? lns[2]
    puts "chlog: Already released #{lns[1][1..]}"
  else
    to_wr = "## [#{ver}](#) (#$today)\n"
    new_cont = "# Changelog\n\n"
    new_cont += to_wr + lns[3..].join('')
    File.write("CHANGELOG.md", new_cont)
    puts "Release #{ver} in changelog!"
  end
end


def add_log_sensitive(log)

  # Be careful the when statements order
  # Match the case you want first
  case log
  when /deprecat/i, /remove/i, /^not/i                 then add_to_deprecations(log)
  when /feature/i, /support/i, /add/i, /update/i       then add_to_enhancements(log)
  when /fix/i, /repair/i, /bug/i, /problem/i, /issue/i then add_to_bugfix(log)
  else
    add_to_enhancements(log)
  end
end

def with_git
  gitlog = `git log --oneline -n 1`
  log = gitlog.split(' ')
  log = log[1..].join(' ')
  add_log_sensitive(log)
end


#############
#    main
#############

if $*.size == 0
  if File.exists? "CHANGELOG.md"
    get_changelog
  else
    get_changelog
  end
  exit
end

action = $*[0]
log = $*[1..].join(' ')

case action
when ?h, "-h" then help()
when ?e, "-e" then add_to_enhancements(log)
when ?b, "-b" then add_to_bugfix(log)
when ?d, "-d" then add_to_deprecations(log)
when ?r, "-r" then release_new_version($*[1])
else
  help
  # add_log_sensitive $*[0..].join(' ')
end

